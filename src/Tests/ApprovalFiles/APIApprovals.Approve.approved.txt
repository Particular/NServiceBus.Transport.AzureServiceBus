[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.AzureServiceBus.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
namespace NServiceBus
{
    public class AzureServiceBusTransport : NServiceBus.Transport.TransportDefinition
    {
        public AzureServiceBusTransport(string connectionString) { }
        public bool EnablePartitioning { get; set; }
        public int EntityMaximumSize { get; set; }
        public int? PrefetchCount { get; set; }
        public int PrefetchMultiplier { get; set; }
        public Microsoft.Azure.ServiceBus.RetryPolicy RetryPolicy { get; set; }
        public System.Func<string, string> SubscriptionNamingConvention { get; set; }
        public System.Func<System.Type, string> SubscriptionRuleNamingConvention { get; set; }
        public System.TimeSpan TimeToWaitBeforeTriggeringCircuitBreaker { get; set; }
        public Microsoft.Azure.ServiceBus.Primitives.ITokenProvider TokenProvider { get; set; }
        public string TopicName { get; set; }
        public bool UseWebSockets { get; set; }
        public override System.Collections.Generic.IReadOnlyCollection<NServiceBus.TransportTransactionMode> GetSupportedTransactionModes() { }
        public override System.Threading.Tasks.Task<NServiceBus.Transport.TransportInfrastructure> Initialize(NServiceBus.Transport.HostSettings hostSettings, NServiceBus.Transport.ReceiveSettings[] receivers, string[] sendingAddresses) { }
        public override string ToTransportAddress(NServiceBus.Transport.QueueAddress address) { }
    }
    public static class AzureServiceBusTransportSettingsExtensions
    {
        [System.Obsolete("Use `AzureServiceBusTransport.RetryPolicy` instead. The member currently throws a" +
            " NotImplementedException. Will be removed in version 3.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> CustomRetryPolicy(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, Microsoft.Azure.ServiceBus.RetryPolicy retryPolicy) { }
        [System.Obsolete("Use `AzureServiceBusTransport.TokenProvider` instead. The member currently throws" +
            " a NotImplementedException. Will be removed in version 3.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> CustomTokenProvider(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, Microsoft.Azure.ServiceBus.Primitives.ITokenProvider tokenProvider) { }
        [System.Obsolete("Use `AzureServiceBusTransport.EnablePartitioning` instead. The member currently t" +
            "hrows a NotImplementedException. Will be removed in version 3.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> EnablePartitioning(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
        [System.Obsolete("Use `AzureServiceBusTransport.EntityMaximumSize` instead. The member currently th" +
            "rows a NotImplementedException. Will be removed in version 3.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> EntityMaximumSize(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, int maximumSizeInGB) { }
        [System.Obsolete("Use `AzureServiceBusTransport.PrefetchCount` instead. The member currently throws" +
            " a NotImplementedException. Will be removed in version 3.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> PrefetchCount(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, int prefetchCount) { }
        [System.Obsolete("Use `AzureServiceBusTransport.PrefetchMultiplier` instead. The member currently t" +
            "hrows a NotImplementedException. Will be removed in version 3.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> PrefetchMultiplier(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, int prefetchMultiplier) { }
        [System.Obsolete("Use `SubscriptionRuleNamingConvention` instead. The member currently throws a Not" +
            "ImplementedException. Will be removed in version 3.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> RuleNameShortener(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, System.Func<string, string> ruleNameShortener) { }
        [System.Obsolete("Use `SubscriptionNamingConvention` instead. The member currently throws a NotImpl" +
            "ementedException. Will be removed in version 3.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> SubscriptionNameShortener(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, System.Func<string, string> subscriptionNameShortener) { }
        [System.Obsolete("Use `AzureServiceBusTransport.SubscriptionNamingConvention` instead. The member c" +
            "urrently throws a NotImplementedException. Will be removed in version 3.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> SubscriptionNamingConvention(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, System.Func<string, string> subscriptionNamingConvention) { }
        [System.Obsolete("Use `AzureServiceBusTransport.SubscriptionRuleNamingConvention` instead. The memb" +
            "er currently throws a NotImplementedException. Will be removed in version 3.0.0." +
            "", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> SubscriptionRuleNamingConvention(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, System.Func<System.Type, string> subscriptionRuleNamingConvention) { }
        [System.Obsolete("Use `AzureServiceBusTransport.TimeToWaitBeforeTriggeringCircuitBreaker` instead. " +
            "The member currently throws a NotImplementedException. Will be removed in versio" +
            "n 3.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> TimeToWaitBeforeTriggeringCircuitBreaker(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, System.TimeSpan timeToWait) { }
        [System.Obsolete("Use `TransportDefinition.TopicName` instead. The member currently throws a NotImp" +
            "lementedException. Will be removed in version 3.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> TopicName(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, string topicName) { }
        [System.Obsolete("Use `AzureServiceBusTransport.UseWebSockets` instead. The member currently throws" +
            " a NotImplementedException. Will be removed in version 3.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> UseWebSockets(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
    }
    public static class CustomizeNativeMessageExtensions
    {
        public static void CustomizeNativeMessage(this NServiceBus.Extensibility.ExtendableOptions options, System.Action<Microsoft.Azure.ServiceBus.Message> customization) { }
        [System.Obsolete("Use `CustomizeNativeMessage(this ExtendableOptions options, Action<Message> custo" +
            "mization)` instead. The member currently throws a NotImplementedException. Will " +
            "be removed in version 3.0.0.", true)]
        public static void CustomizeNativeMessage(this NServiceBus.Extensibility.ExtendableOptions options, NServiceBus.IPipelineContext context, System.Action<Microsoft.Azure.ServiceBus.Message> customization) { }
    }
}