[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.AzureServiceBus.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
namespace NServiceBus
{
    public class AzureServiceBusSettings
    {
        public AzureServiceBusSettings() { }
        [System.Obsolete("Provide the connection string to the AzureServiceBusTransport constructor. Will b" +
            "e treated as an error from version 3.0.0. The member currently throws a NotImple" +
            "mentedException. Will be removed in version 4.0.0.", false)]
        public NServiceBus.AzureServiceBusSettings ConnectionString(string connectionString) { }
        [System.Obsolete("Use `AzureServiceBusTransport.RetryPolicy` instead. Will be treated as an error f" +
            "rom version 3.0.0. The member currently throws a NotImplementedException. Will b" +
            "e removed in version 4.0.0.", false)]
        public NServiceBus.AzureServiceBusSettings CustomRetryPolicy(Azure.Messaging.ServiceBus.ServiceBusRetryOptions retryPolicy) { }
        [System.Obsolete("Use `AzureServiceBusTransport.EnablePartitioning` instead. Will be treated as an " +
            "error from version 3.0.0. The member currently throws a NotImplementedException." +
            " Will be removed in version 4.0.0.", false)]
        public NServiceBus.AzureServiceBusSettings EnablePartitioning() { }
        [System.Obsolete("Use `AzureServiceBusTransport.EntityMaximumSize` instead. Will be treated as an e" +
            "rror from version 3.0.0. The member currently throws a NotImplementedException. " +
            "Will be removed in version 4.0.0.", false)]
        public NServiceBus.AzureServiceBusSettings EntityMaximumSize(int maximumSizeInGB) { }
        [System.Obsolete("Use `AzureServiceBusTransport.PrefetchCount` instead. Will be treated as an error" +
            " from version 3.0.0. The member currently throws a NotImplementedException. Will" +
            " be removed in version 4.0.0.", false)]
        public NServiceBus.AzureServiceBusSettings PrefetchCount(int prefetchCount) { }
        [System.Obsolete("Use `AzureServiceBusTransport.PrefetchMultiplier` instead. Will be treated as an " +
            "error from version 3.0.0. The member currently throws a NotImplementedException." +
            " Will be removed in version 4.0.0.", false)]
        public NServiceBus.AzureServiceBusSettings PrefetchMultiplier(int prefetchMultiplier) { }
        [System.Obsolete("Use `AzureServiceBusTransport.SubscriptionNamingConvention` instead. Will be trea" +
            "ted as an error from version 3.0.0. The member currently throws a NotImplemented" +
            "Exception. Will be removed in version 4.0.0.", false)]
        public NServiceBus.AzureServiceBusSettings SubscriptionNamingConvention(System.Func<string, string> subscriptionNamingConvention) { }
        [System.Obsolete("Use `AzureServiceBusTransport.SubscriptionRuleNamingConvention` instead. Will be " +
            "treated as an error from version 3.0.0. The member currently throws a NotImpleme" +
            "ntedException. Will be removed in version 4.0.0.", false)]
        public NServiceBus.AzureServiceBusSettings SubscriptionRuleNamingConvention(System.Func<System.Type, string> subscriptionRuleNamingConvention) { }
        [System.Obsolete("Use `AzureServiceBusTransport.TimeToWaitBeforeTriggeringCircuitBreaker` instead. " +
            "Will be treated as an error from version 3.0.0. The member currently throws a No" +
            "tImplementedException. Will be removed in version 4.0.0.", false)]
        public NServiceBus.AzureServiceBusSettings TimeToWaitBeforeTriggeringCircuitBreaker(System.TimeSpan timeToWait) { }
        [System.Obsolete("Use `AzureServiceBusTransport.TokenCredential` instead. Will be treated as an err" +
            "or from version 3.0.0. The member currently throws a NotImplementedException. Wi" +
            "ll be removed in version 4.0.0.", false)]
        public NServiceBus.AzureServiceBusSettings TokenCredential(Azure.Core.TokenCredential tokenCredential) { }
        [System.Obsolete("Use `AzureServiceBusTransport.TopicName` instead. Will be treated as an error fro" +
            "m version 3.0.0. The member currently throws a NotImplementedException. Will be " +
            "removed in version 4.0.0.", false)]
        public NServiceBus.AzureServiceBusSettings TopicName(string topicName) { }
        [System.Obsolete("Use `AzureServiceBusTransport.UseWebSockets` instead. Will be treated as an error" +
            " from version 3.0.0. The member currently throws a NotImplementedException. Will" +
            " be removed in version 4.0.0.", false)]
        public NServiceBus.AzureServiceBusSettings UseWebSockets() { }
    }
    public static class AzureServiceBusSettingsExtensions
    {
        [System.Obsolete("Use `EndpointConfiguration.UseTransport(TransportDefinition)` instead. Will be tr" +
            "eated as an error from version 3.0.0. The member currently throws a NotImplement" +
            "edException. Will be removed in version 4.0.0.", false)]
        public static NServiceBus.AzureServiceBusSettings UseTransport<TTransport>(this NServiceBus.EndpointConfiguration endpointConfiguration) { }
    }
    public class AzureServiceBusTransport : NServiceBus.Transport.TransportDefinition
    {
        public AzureServiceBusTransport(string connectionString) { }
        protected string ConnectionString { get; set; }
        public bool EnablePartitioning { get; set; }
        public int EntityMaximumSize { get; set; }
        public int? PrefetchCount { get; set; }
        public int PrefetchMultiplier { get; set; }
        public Azure.Messaging.ServiceBus.ServiceBusRetryOptions RetryPolicyOptions { get; set; }
        public System.Func<string, string> SubscriptionNamingConvention { get; set; }
        public System.Func<System.Type, string> SubscriptionRuleNamingConvention { get; set; }
        public System.TimeSpan TimeToWaitBeforeTriggeringCircuitBreaker { get; set; }
        public Azure.Core.TokenCredential TokenCredential { get; set; }
        public string TopicName { get; set; }
        public bool UseWebSockets { get; set; }
        public override System.Collections.Generic.IReadOnlyCollection<NServiceBus.TransportTransactionMode> GetSupportedTransactionModes() { }
        public override System.Threading.Tasks.Task<NServiceBus.Transport.TransportInfrastructure> Initialize(NServiceBus.Transport.HostSettings hostSettings, NServiceBus.Transport.ReceiveSettings[] receivers, string[] sendingAddresses, System.Threading.CancellationToken cancellationToken = default) { }
        public override string ToTransportAddress(NServiceBus.Transport.QueueAddress address) { }
    }
    public static class CustomizeNativeMessageExtensions
    {
        public static void CustomizeNativeMessage(this NServiceBus.Extensibility.ExtendableOptions options, System.Action<Azure.Messaging.ServiceBus.ServiceBusMessage> customization) { }
    }
}
namespace NServiceBus.Testing
{
    public static class TestableCustomizeNativeMessageExtensions
    {
        public static System.Action<Azure.Messaging.ServiceBus.ServiceBusMessage> GetNativeMessageCustomization(this NServiceBus.Extensibility.ExtendableOptions options) { }
    }
}