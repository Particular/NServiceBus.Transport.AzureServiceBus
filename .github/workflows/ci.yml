name: CI
on:
  push:
    branches:
      - master
      - release-*
  pull_request:
  pull_request_target:
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  build:
    if:
      (github.event_name == 'pull_request_target' && github.event.pull_request.user.login == 'dependabot[bot]') ||
      (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]') ||
      github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            name: Windows
          - os: ubuntu-20.04
            name: Linux
      fail-fast: false
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Checkout for Dependabot
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2.3.4
        with:
          ref: 'refs/pull/${{ github.event.number }}/merge'
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: 5.0.x
      - name: Setup .NET Core 3.1 runtime
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: 3.1.x
      # Needed only because command line tool is still targeting netcoreapp2.1
      - name: Setup .NET Core 2.1 runtime
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: 2.1.x
      - name: Build
        run: dotnet build src --configuration Release
      - name: Upload packages
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2.2.4
        with:
          name: NuGet packages
          path: nugets/
          retention-days: 7
      - name: Azure login
        uses: azure/login@v1.3.0
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Setup test infrastructure
        id: infra
        shell: pwsh
        run: |
          $name = "psw-asb-$(Get-Random)"
          echo "::set-output name=name::$name"
          $dateTag = "Created=$(Get-Date -Format "yyyy-MM-dd")"

          echo "Creating Azure Service Bus namespace $name (This can take awhile.)"
          $details = az servicebus namespace create --resource-group GitHubActions-RG --name $name --tags Package=ASBTransport RunnerOS=${{ runner.os }} $dateTag | ConvertFrom-Json

          echo "Getting connection string"
          $keys = az servicebus namespace authorization-rule keys list --resource-group GitHubActions-RG --namespace-name $name --name RootManageSharedAccessKey | ConvertFrom-Json
          $connectString = $keys.primaryConnectionString
          echo "::add-mask::$connectString"

          echo "AzureServiceBus_ConnectionString=$connectString" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      - name: Run Windows tests
        if: runner.os == 'Windows'
        run: dotnet test src --configuration Release --no-build --logger "GitHubActions;report-warnings=false"
      - name: Run Linux tests
        if: runner.os == 'Linux'
        # -m:1 parameter prevents test projects from being run in parallel, which causes Gateway port conflicts between System/Microsoft data client tests
        run: |
          dotnet test src --configuration Release --no-build --framework net5.0 --logger "GitHubActions;report-warnings=false"
          dotnet test src --configuration Release --no-build --framework netcoreapp3.1 --logger "GitHubActions;report-warnings=false"
      - name: Teardown infrastructure
        if: ${{ always() }}
        continue-on-error: true
        shell: pwsh
        run: |
          $ignore = az servicebus namespace delete --resource-group GitHubActions-RG --name ${{ steps.infra.outputs.name }}
